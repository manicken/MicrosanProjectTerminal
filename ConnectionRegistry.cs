using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Microsan
{
    public static class ConnectionRegistry
    {
        private static readonly Dictionary<string, ConnectionBase> _types = new Dictionary<string, ConnectionBase>();

        public static IReadOnlyDictionary<string, ConnectionBase> Types => _types;

        // Call once during startup
        public static void DiscoverConnections()
        {
            _types.Clear();

            var connectionTypes = AppDomain.CurrentDomain
                .GetAssemblies()
                .SelectMany(a =>
                {
                    try { return a.GetTypes(); }
                    catch { return Array.Empty<Type>(); }
                })
                .Where(t =>
                    typeof(IConnection).IsAssignableFrom(t) &&
                    !t.IsInterface &&
                    !t.IsAbstract);

            foreach (var t in connectionTypes)
            {
                // Look for static members: public const string TypeName and public static ConnectionBase GetConnectionBase()
                var typeNameField = t.GetField("TypeName", BindingFlags.Public | BindingFlags.Static);
                var getBaseMethod = t.GetMethod("GetConnectionBase", BindingFlags.Public | BindingFlags.Static);

                if (typeNameField == null || getBaseMethod == null)
                    continue;

                string typeName = typeNameField.GetValue(null) as string;
                var connBase = getBaseMethod.Invoke(null, null) as ConnectionBase;

                if (!string.IsNullOrEmpty(typeName) && connBase != null)
                {
                    _types[typeName] = connBase;
                }
            }
        }

        // Debug helper — returns readable list
        public static string GetDiscoveredTypeNames()
        {
            if (_types.Count == 0) return "(no connections found)";
            return string.Join(", ", _types.Keys);
        }
    }

    /* the following is autogenerated using ConnectionRegistry.DiscoverConnections();
         * but keept here as a ref how the structures look like
         private static Dictionary<string, ConnectionBase> Types = new Dictionary<string, ConnectionBase>()
        {
            { TCPClientConnection.TypeName, TCPClientConnection.GetConnectionBase() },
            { SerialConnection.TypeName, SerialConnection.GetConnectionBase() },
            { WebSocketClientConnection.TypeName, WebSocketClientConnection.GetConnectionBase() },
            { HttpRestClientConnection.TypeName, HttpRestClientConnection.GetConnectionBase() },
            { MqttClientConnection.TypeName, MqttClientConnection.GetConnectionBase() }
        };*/
}
